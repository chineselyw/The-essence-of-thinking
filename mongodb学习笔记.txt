var eqs = db.equipments.find();

while(eqs.hasNext()){ 
 var obj =eqs.next();
 if(obj.hasOwnProperty("room") && obj.room.hasOwnProperty("_id")) {
  obj.roomName = db.room.find({_id:obj.room._id},{_id:0})[0].name; 
 }
 print(obj.roomName);
}



ver2

var eqs = db.equipments.find();
var objs = [];
while(eqs.hasNext()){ 
var obj = eqs.next(); 
 objs.push(obj);

 if(obj.hasOwnProperty("room") && obj.room.hasOwnProperty("_id")) {
  obj.roomName = db.room.find({_id:obj.room._id},{_id:0})[0].name; 
 }
 
}
for(var i=0;i<objs.length;i++){
 print(objs[i].roomName)
}



*存储过程

定义：
db.system.js.save({_id:"searchEqs",value:function(skip,limit,sort){ var eqs = db.equipments.find().skip(skip).limit(limit).sort(sort);var objs = [];while(eqs.hasNext()){var obj = eqs.next();  objs.push(obj);if(obj.hasOwnProperty("room") && obj.room.hasOwnProperty("_id")){obj.roomName=db.room.find({_id:obj.room._id},{_id:0})[0].name; }}return objs;}})

db.system.js.save({ "_id" : "addTask", "value" : function (obj){db.task.insert(obj);var a = db.task.find();var b=[];while(a.hasNext()){b.push(a.next())};return b;}})

//初始化comm接口集合
db.system.js.save({ "_id":"init", 
					"value" : function (){
						db.commInterface.insert({"_id":1,"nets":[]});
						db.commInterface.insert({"_id":2,"coms":[]});
						return {total:2,message:"2个记录被插入。"}
					}
				})


db.system.js.save({ "_id" : "addCommInterface", "value" : function (obj){db.commInterface.insert(obj);var a = db.commInterface.find();var b=[];while(a.hasNext()){b.push(a.next())};return b;}})

db.system.js.save({ "_id" : "addNetCommInterface", 
					"value" : function (obj){
								db.commInterface.update({"_id":1},{$addToSet:{nets:obj}})
								var a = db.commInterface.find().sort({"_id":1});
								var b=[];
								while(a.hasNext()){
									b.push(a.next());
								}
								return b;
							}
					})


执行：
db.eval("searchEqs(1,1,{name:-1})")
或：db.eval(function(x,y,z){return searchEqs(x,y,z);},1,1,{name:-1})


*MongoDB wiki(http://dochub.mongodb.org/drivers/connections)上有不同语言连接池的详细信息

*update命令的第四个参数为true时，对集合中的数组里的多条相同的对象属性值进行修改时，不能全部修改过来 ???????????????????????????????????????????????????????????
> db.t.find()
{ "_id" : ObjectId("57d961319cf391e9f9ead9b5"), "a" : "a1", "b" : 3, "comments" : [ { "a3" : "a6" }, { "a3" : "a7" } ] }
{ "_id" : ObjectId("57d961809cf391e9f9ead9b6"), "a" : "a1", "a1" : "a2", "b" : 1, "comments" : [ { "a3" : "a2123" }, { "a3" : "a7" } ] }
{ "_id" : ObjectId("57d7c2e25701e8c075cf5ee7"), "a" : "b", "b" : 3, "comments" : [ { "a3" : "a7", "b3" : "b333" }, { "a3" : "a5" }, { "a3" : "a7" }, { "a3" : "a5", "b3" : "b333" } ] }
> db.t.update({"comments.a3":"a7"},{$set:{"comments.$.a3":"a9"}},false,true)
WriteResult({ "nMatched" : 3, "nUpserted" : 0, "nModified" : 3 })
> db.t.find()
{ "_id" : ObjectId("57d961319cf391e9f9ead9b5"), "a" : "a1", "b" : 3, "comments" : [ { "a3" : "a6" }, { "a3" : "a9" } ] }
{ "_id" : ObjectId("57d961809cf391e9f9ead9b6"), "a" : "a1", "a1" : "a2", "b" : 1, "comments" : [ { "a3" : "a2123" }, { "a3" : "a9" } ] }
{ "_id" : ObjectId("57d7c2e25701e8c075cf5ee7"), "a" : "b", "b" : 3, "comments" : [ { "a3" : "a9", "b3" : "b333" }, { "a3" : "a5" }, { "a3" : "a7" }, { "a3" : "a5", "b3" : "b333" } ] }
这个问题如何处理，如何全部修改呢


*find
1、指定返回的键db.user.find({},{“username:1,”email”:0})
2、限制	1)db.user.find({“age”:{“$gte”:18,”$lte”:30,$ne:20}})
	2)or查询 “$in”、”$nin”可以用来查询一个键的多个值{field:{$in:[{…},{…},…]}};
		”$or”用来完成多个键值的任意给定值{$or:[{field1:…},{field2:…},…]}
	3)$not是元条件句，即可以用在任何其他条件之上。
		$mod　是取模运算符　例：{field:{$mod:[5,1]}} 
3、特定于类型的查询
	1）null db.t.find({“z”:null})与　db.t.find({“z”:{$in:[null],$exists:true}})
	2)正则表达式
	3）查询数组 普通的：{”comments“:{“a3”:a6}} 
		$all在find的第一个参数上使用: {arrayField:{$all:[{},{},..]}}   {“arrayField.1”:value}
		$size在find的第一个参数上使用: {arrayField:{$size:3}}
		$slice在find的第二个参数上使用：{“comments”:{“$slice”:-10}}得到后10条;　{“comments”:{$slice:[20,29]}}得到20－29条
	4)查询内嵌文档　{“comments.a3”:”a7”}
		

		

